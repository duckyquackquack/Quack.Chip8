using System;

namespace Quack.Chip8.Core.Implementation
{
    public enum FontType
    {
        Chip48,
        CosmacVip,
        Telmac,
        Dream6800,
        Eti660,
        FishNChips
    };

    public class FontFactory : IFontFactory
    {
        public byte[] GetFont(FontType fontType = FontType.Chip48)
        {
            return fontType switch
            {
                FontType.Chip48 => GetChip48Font(),
                FontType.CosmacVip => GetCosmacVipFont(),
                FontType.Telmac => GetCosmacVipFont(), // https://github.com/mattmikolay/chip-8/issues/3#issuecomment-557942536
                FontType.Dream6800 => GetDream6800Font(),
                FontType.Eti660 => GetEti660Font(),
                FontType.FishNChips => GetFishNChipsFont(),
                _ => throw new Exception($"Unknown font type '{fontType}'"),
            };
        }

        private static byte[] GetFishNChipsFont()
        {
            return new byte[]
            {
                0x60, 0xA0, 0xA0, 0xA0, 0xC0, //0
                0x40, 0xC0, 0x40, 0x40, 0xE0, //1
                0xC0, 0x20, 0x40, 0x80, 0xE0, //2
                0xC0, 0x20, 0x40, 0x20, 0xC0, //3
                0x20, 0xA0, 0xE0, 0x20, 0x20, //4
                0xE0, 0x80, 0xC0, 0x20, 0xC0, //5
                0x40, 0x80, 0xC0, 0xA0, 0x40, //6
                0xE0, 0x20, 0x60, 0x40, 0x40, //7
                0x40, 0xA0, 0x40, 0xA0, 0x40, //8
                0x40, 0xA0, 0x60, 0x20, 0x40, //9
                0x40, 0xA0, 0xE0, 0xA0, 0xA0, //A
                0xC0, 0xA0, 0xC0, 0xA0, 0xC0, //B
                0x60, 0x80, 0x80, 0x80, 0x60, //C
                0xC0, 0xA0, 0xA0, 0xA0, 0xC0, //D
                0xE0, 0x80, 0xC0, 0x80, 0xE0, //E
                0xE0, 0x80, 0xC0, 0x80, 0x80, //F
            };
        }

        private static byte[] GetEti660Font()
        {
            return new byte[]
            {
                0xE0, 0xA0, 0xA0, 0xA0, 0xE0, //0
                0x20, 0x20, 0x20, 0x20, 0x20, //1
                0xE0, 0x20, 0xE0, 0x80, 0xE0, //2
                0xE0, 0x20, 0xE0, 0x20, 0xE0, //3
                0xA0, 0xA0, 0xE0, 0x20, 0x20, //4
                0xE0, 0x80, 0xE0, 0x20, 0xE0, //5
                0xE0, 0x80, 0xE0, 0xA0, 0xE0, //6
                0xE0, 0x20, 0x20, 0x20, 0x20, //7
                0xE0, 0xA0, 0xE0, 0xA0, 0xE0, //8
                0xE0, 0xA0, 0xE0, 0x20, 0xE0, //9
                0xE0, 0xA0, 0xE0, 0xA0, 0xA0, //A
                0x80, 0x80, 0xE0, 0xA0, 0xE0, //B
                0xE0, 0x80, 0x80, 0x80, 0xE0, //C
                0x20, 0x20, 0xE0, 0xA0, 0xE0, //D
                0xE0, 0x80, 0xE0, 0x80, 0xE0, //E
                0xE0, 0x80, 0xE0, 0x80, 0x80, //F
            };
        }

        private static byte[] GetDream6800Font()
        {
            return new byte[]
            {
                0xE0, 0xA0, 0xA0, 0xA0, 0xE0, //0
                0x40, 0x40, 0x40, 0x40, 0x40, //1
                0xE0, 0x20, 0xE0, 0x80, 0xE0, //2
                0xE0, 0x20, 0xE0, 0x20, 0xE0, //3
                0x80, 0xA0, 0xA0, 0xE0, 0x20, //4
                0xE0, 0x80, 0xE0, 0x20, 0xE0, //5
                0xE0, 0x80, 0xE0, 0xA0, 0xE0, //6
                0xE0, 0x20, 0x20, 0x20, 0x20, //7
                0xE0, 0xA0, 0xE0, 0xA0, 0xE0, //8
                0xE0, 0xA0, 0xE0, 0x20, 0xE0, //9
                0xE0, 0xA0, 0xE0, 0xA0, 0xA0, //A
                0xC0, 0xA0, 0xE0, 0xA0, 0xC0, //B
                0xE0, 0x80, 0x80, 0x80, 0xE0, //C
                0xC0, 0xA0, 0xA0, 0xA0, 0xC0, //D
                0xE0, 0x80, 0xE0, 0x80, 0xE0, //E
                0xE0, 0x80, 0xC0, 0x80, 0x80  //F
            };
        }

        private static byte[] GetCosmacVipFont()
        {
            return new byte[]
            {
                0xF0, 0x90, 0x90, 0x90, 0xF0, //0
                0x60, 0x20, 0x20, 0x20, 0x70, //1
                0xF0, 0x10, 0xF0, 0x80, 0xF0, //2
                0xF0, 0x10, 0xF0, 0x10, 0xF0, //3
                0xA0, 0xA0, 0xF0, 0x20, 0x20, //4
                0xF0, 0x80, 0xF0, 0x10, 0xF0, //5
                0xF0, 0x80, 0xF0, 0x90, 0xF0, //6
                0xF0, 0x10, 0x10, 0x10, 0x10, //7
                0xF0, 0x90, 0xF0, 0x90, 0xF0, //8
                0xF0, 0x90, 0xF0, 0x10, 0xF0, //9
                0xF0, 0x90, 0xF0, 0x90, 0x90, //A
                0xF0, 0x50, 0x70, 0x50, 0xF0, //B
                0xF0, 0x80, 0x80, 0x80, 0xF0, //C
                0xF0, 0x50, 0x50, 0x50, 0xF0, //D
                0xF0, 0x80, 0xF0, 0x80, 0xF0, //E
                0xF0, 0x80, 0xF0, 0x80, 0x80  //F
            };
        }

        private static byte[] GetChip48Font()
        {
            return new byte[]
            {
                0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
                0x20, 0x60, 0x20, 0x20, 0x70, // 1
                0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
                0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
                0x90, 0x90, 0xF0, 0x10, 0x10, // 4
                0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
                0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
                0xF0, 0x10, 0x20, 0x40, 0x40, // 7
                0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
                0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
                0xF0, 0x90, 0xF0, 0x90, 0x90, // A
                0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
                0xF0, 0x80, 0x80, 0x80, 0xF0, // C
                0xE0, 0x90, 0x90, 0x90, 0xE0, // D
                0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
                0xF0, 0x80, 0xF0, 0x80, 0x80  // F
            };
        }
    }
}
