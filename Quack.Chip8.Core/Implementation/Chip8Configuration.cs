// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Quack.Chip8.Implementation;
//
//    var chip8Configuration = Chip8Configuration.FromJson(jsonString);

using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Quack.Chip8.Implementation
{
    public partial class Chip8Configuration
    {
        [JsonProperty("display")]
        public DisplayConfiguration DisplayConfiguration { get; set; }

        [JsonProperty("cpu")]
        public CpuConfiguration Cpu { get; set; }

        [JsonProperty("memory")]
        public MemoryConfiguration MemoryConfiguration { get; set; }

        [JsonProperty("font")]
        public string Font { get; set; }

        [JsonProperty("addressStackSize")]
        public int AddressStackSize { get; set; }

        [JsonProperty("ambiguousInstructionsOptions")]
        public AmbiguousInstructionsOptions AmbiguousInstructionsOptions { get; set; }
    }

    public class AmbiguousInstructionsOptions
    {
        [JsonProperty("incrementIndexForFX55")]
        public bool IncrementIndexForFx55 { get; set; }

        [JsonProperty("incrementIndexForFX65")]
        public bool IncrementIndexForFx65 { get; set; }

        [JsonProperty("collisionFlagForFX1EIfOverflow")]
        public bool CollisionFlagForFx1EIfOverflow { get; set; }

        [JsonProperty("useBXNNForJumpWithOffset")]
        public bool UseBxnnForJumpWithOffset { get; set; }

        [JsonProperty("setXToYBeforeShiftFor8XY6And8XYE")]
        public bool SetXToYBeforeShiftFor8Xy6And8Xye { get; set; }
    }

    public class CpuConfiguration
    {
        [JsonProperty("initialTargetFrequency")]
        public int InitialTargetFrequency { get; set; }
    }

    public class DisplayConfiguration
    {
        [JsonProperty("width")]
        public int Width { get; set; }

        [JsonProperty("height")]
        public int Height { get; set; }
    }

    public class MemoryConfiguration
    {
        [JsonProperty("size")]
        public int Size { get; set; }

        [JsonProperty("programStartLocation")]
        public int ProgramStartLocation { get; set; }

        [JsonProperty("fontStartLocation")]
        public int FontStartLocation { get; set; }
    }

    public partial class Chip8Configuration
    {
        public static Chip8Configuration FromJson(string json) => JsonConvert.DeserializeObject<Chip8Configuration>(json, Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Chip8Configuration self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
